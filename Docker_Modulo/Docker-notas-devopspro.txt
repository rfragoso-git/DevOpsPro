# Aula s/ Docker

LXC - Containers

sudo apt update -y && sudo apt install lxc lxc-templates 

sudo lxc-create -t ubuntu -n my_container # Criar um containers

sudo lxc-ls --fancy # Listar os containers

sudo lxc-start -n my_container # Para iniciar o containers

sudo lxc-attach -n my_container # Entrar no container

LXD - Containers

sudo snap install lxd 

lxc launch ubuntu:22.04 my-container

lxc list

lxc exec my-container /bin/bash

lxc stop my-container

lxc delete my-container

# Docker

Imagem = Filesystem

Primeiro elemento é o Docker Daemon, responsável por gerenciar todos os elementos e objetos do Docker
- imagens
- containers
- network
- volumes

Elementos:
    Docker Host (Notebbok, Desktop, Servers)
        * Docker Daemon - responsável por gerenciar todas os elementos do Docker, roda em uma maquina, que chamamos de Docker Host (local/remoto)
            - Gerenciar = containers, imagens

        * Docker Client é o elemento que interage, se comunica com o Docker Daemon

        * Docker Register é o repositório das imagens do Docker (Publíco/Privado) "DockerHub"

Arquitetura do Docker Daemon

Originalmente Docker Daemon + Para criar containers usava o LXC - que interagia com Kernel Linux, componentes (namespace, cgroups).
A evolução do Docker Daemon passou para estrutura modular gerenciando (network, imagem, volumes)
O LXC de terceiros foi substituído pela Docker chamado ContainerD.
    
- ContainerD responsável por gerenciar o ciclo de vida dos containers.
    processos:
    - O RUNC que esta abaixo do ContainerD responsável por executar os containers, ele é chamado para criar, e após a criação ele é encerrado
    - SHIM - responsável por gerenciar o container (stdout/stdin/stde)
    - Container

ECR - Elastic Container Register (AWS)
ACR - Azure Container Register (Azure)

*** Recurso do Docker publish de porta or portbind

docker container run -d -p 3306:3306 -e MYSQL_ROOT_PASSWORD=rfR@g0s01966 -e MYSQL_DATABASE=db_MYDB -e MYSQL_USER=rfragoso -e MYSQL_PASSWORD=rfR@g0s01966 mysql

docker Container run -it -p 8080:8080 ubuntu
- apt-get install -y 
- curl -fsSL https://deb.nodesource.com/setup_23.x -o nodesource_setup.sh
- bash nodesource_setup.sh
- apt-get install -y nodejs
- apt-get install -y nodejs
- node -v

# Copiar conteudo para dentro de um container Docker
docker container cp . 2162c726ecc8:/app
# Dentro do container
    npm install
    node server.js

Imagem vs Containers

A imagem possui todo (Filesystem) sistema de arquivos necessários para executar o container.

Criar imagens de container, usa uma tecnologia do Linux chamada OverlayFS
---

### sudo mkdia -p /overlay/primeira_camada/

sudo echo "Arquivo teste na primeira camada" | sudo tee /overlay/primeira_camada/01_camada.txt

sudo echo "Arquivo teste na segunda camada" | sudo tee /overlay/segunda_camada/02_camada.txt

sudo mount -t overlay -o lowerdir=/overlay/primeira_camada/,upperdir=/overlay/segunda_camada/,workdi
r=/overlay/worker/ overlay /overlay/merge/

---

docker container run -it -p 8080:8080 convert-temp:latest /bin/bash # -it temnial /bin/bash

docker container run -d -p 8080:8080 convert-temp:latest node /app/server.js # -d roda em segundo plano

docker commit <ID ou nome do container> <nome_da_imagem>:<tag>

docker image history cba60be8930d # Inspeciona as camadas da imagem

docker image inspect cba60be8930d # Inspeciona a imagem com resultado em json

###Dockerfile

docker build -t app-convert-temp . --no-cahe  # Não aproveita o cache das camadas

docker run --name app-conversao-temperatura -d -p 8080:8080 app-convert-temp

docker container inspect bcf2a9300c36 # Verifica as informação do json de criação do container

docker run -it --name aula-docker --env VLR_DOCKER_ENV=" Novo valor é Kubernetes!" ubuntu-aula /bin/bash # ENV adiona uma variável de ambiente

docker build --build-arg VAR_MSG="Novo valor de AGR" -t ubuntu-aula . # ARG adicionar parâmetros na minha imagem

docker run -it --name aula-docker -P ubuntu-aula /bin/bash # E_P expoões todos as portas, atribuindo uma automaticamente

docker run -it --entrypoint "/bin/bash" ubuntu-aula

docker commit 389f8fdcd16a convert-temp-commit

docker tag convert-temp:latest rof1966/convert-temp:v1

docker push rof1966/convert-temp:latest


### Multistage Build de imagens Docker

# tipo de linguagens de programação:
- Interpretadas <=> código => interpretador => aplicação (NodeJS, Python, PHP, Javascript, Ruby)

- Compildas <=> código => compilação (SDK) => criação do arquivo binário  => executar binário da aplicação ( GO, C, C++, Rust, Swift, Fortran, Pascal)
    linguagens compiladas são mais eficiente

- Hibrida de Interpretadas e Compildas <=> código => compilação => linguagem intermediária IL => Interpretador => Aplicação (Java, donet Core)

# tecnologias de Frontend tb podem se utlizar de Multistage Build
- Angular
- React

código => arquivos Estáticos (html ,css) => servidor web (IIS, nginx)

docker build -t rof1966/app_golang:v1 -f Dockerfile.nome .

docker history nro-image # Verifica todas as camadas da imagem

### volumes

Aplicações Stateless => não perssistem informações, executam processos e não armazenam dados, nem um arquivo, 
exemplos: Aplicações WEB, Workers processando serviço de mensageria.

Aplicações Statefull => são aplicações que perssistem dados. exemplos: Banco de dados, Servidores FTP, S3, Blob

# O Docker possui três tios de volumes:
- bind
- volume
- tmpfs
- drivers

docker container run -it --mount type=bind,source="$(phd)/Volume",target=/app ubuntu:20.04 /bin/bash

docker container run -d -p 8080:80 -v $(pwd)/nginx:/usr/share/nginx/html  nginx:stable-alpine

docker volume rm -f $(docker volume ls)

docker container run -it --mount type=volume,source=data_app,target=/app ubuntu:20.04 /bin/bash

docker volume inspect data_app

docker container run -it --volumes-from 7b90fca821ae ubuntu-vol /bin/bash # Uilizando o volume de outro container

docker container run --volumes-from 7b90fca821ae --rm -v $(pwd):/backup ubuntu:20.04 tar cvf /backup/bkp_vol.tar /app

docker container run -v $(pwd):/backup -v data_vol:/app ubuntu:20.04 tar xvf /backup/bkp_vol.tar # Restaurar um bkp em outro volume

docker container run -it -v data_vol:/app ubuntu:20.04 /bin/bash # Execuntando novo container e acessando o volume

### Volume + Database Postgresql

$ docker run --name user-postgres -e POSTGRES_PASSWORD=0l1ve1R@1966 -d postgres

$ docker run -it --rm --network data-network postgres psql -h some-postgres -U postgres

$ docker run -d \
	--name devops-postgres -p 5432 \
	-e POSTGRES_PASSWORD=0l1ve1R@1966 \
	-e PGDATA=/var/lib/postgresql/data/pgdata \
	-v $(pwd)/data:/var/lib/postgresql/data \
	postgres


docker run -d -p 5432:5432 \
    -e POSTGRES_USER=postgres \
	-e POSTGRES_PASSWORD=0l1ve1R@1966 \
	--mount type=bind,source="$(pwd)/db_vol_data",target=/var/lib/postgresql/data \
	postgres

docker exec -it <nome_do_container> psql -U postgres

# psql -U nome_do_usuario -d nome_do_banco

docker run -d -p 5432:5432 \
    -e POSTGRES_USER=postgres \
	-e POSTGRES_PASSWORD=0l1ve1R@1966 \
	--mount type=volume,source=postgres_vol_data,target=/var/lib/postgresql/data \
	postgres

### Tipo TMPFS - memória RAM - uso para alta performance

docker container run -ti --mount type=tmpfs,target=/app ubuntu:20.04 /bin/bash

docker container run -d -p 3306:3306 --tmpfs /var/lib/mysql -e MYSQL_ROOT_PASSWORD=rootpwd mysql

*** OverlayFS sistema gerenciamento de arquivos do Docker

docker container run -d -p 5432:5432 \
--network 
-e POSTGRES_DB=kubedevnews \
-e POSTGRES_USER=kubedevnews \
-e POSTGRES_PASSWORD=Pg123 \
-v kubenews_data:/var/lib/postgresql/data \
postgres

### Networke

libnetwork = é modulo utilizado como base para o Docker Daemon

CNM = Container Networke Module

Sandbox é o isolamento da camada de network, dentro temos todos os elementos, ele é como um dispositivo de rede.

Endpoint é a interface virtual de rede, que é vinculado ao Sandbox. Tem a função de conectar o container a network.

Tipos de network:

- Bridge = conectar varios containers na mesma network, só funciona com IP
- Null = nunhuma network conectada ao container, mantendo ele isolado.
- Host = conecta o container a mesma network da maquina local
- MacVLan = conecta o container a uma rede física
- overlay = utilizado para trabalhar com diversos hosts formando um cluster

docker network create -d bridge my_net_bridge

docker network create -d macvlan my_net_macvlan # -d para o drive

# Redes do tipo host e null só pode existir uma

# docker network connect my_network nome_do_container ou id_container

# docker network diconnect my_network nome_do_container ou id_container


docker container run -d -p 5432:5432 \
-e POSTGRES_DB=postgres \
-e POSTGRES_USER=postgres \
-e POSTGRES_PASSWORD=Pg123 \
-v new_vol:/var/lib/postgresql/data \
postgres

# ubuntu = apt install postgresql-client

# CIDR - 

docker network create --subnet=10.0.0.0/16 --gateway=10.0.0.1 my_network_cidr

# Alterar configuração rede Docker /etc/docker/  arquivo daemon.json

Linux cmds = (bridge link, ap address, )

# Rede  do tipo Bridge criar interfaces virtuias (vth0X)  que se conectam a rede local

# Rede do tipo host (eth0) fica liga diretamente a rede local, não utiliza o portbind

# Rede do tipo none isola completamente o container, fica sem intrface de rede. Caso de uso transformação de arquivo com volume compartilhado.

# Linux - arquivo hosts /etc/hosts

docker container run -it --add-host renatofragoso.com:192.168.170.242 ubuntu-vol /bin/bash
# --add-host inserindo um DNS local

Linux: echo "192.168.170.242 renatofragoso.com" | sudo tee -a /etc/hosts

Windows: Add-Content -Path "C:\Windows\System32\drivers\etc\hosts" -Value "192.168.170.242 renatofragoso.com"
Invoke-WebRequest -Uri https://example.com
C:\Windows\System32\drivers\etc\hosts

### Criando aplicação completamente em Docker

docker network create -d bridge kubenews_net

docker container run -d -p 5432:5432 \
--name kubedevnews_db \
-e POSTGRES_DB=kubedevnews \
-e POSTGRES_USER=kubedevnews \
-e POSTGRES_PASSWORD=Pg123 \
--network kubenews_net \
-v kubenews_data:/var/lib/postgresql/data \
postgres

docker container run -d -p 8080:8080 \
--name app_kubenews \
-e DB_DATABASE=kubedevnews \
-e DB_USERNAME=kubedevnews \
-e DB_PASSWORD=Pg123 \
-e DB_HOST=kubedevnews_db \
--network kubenews_net \
rof1966/kube-news-hml:v2

docker container run -d -p 5432:5432 \
--name kubedevnews_db \
-e POSTGRES_PASSWORD=Pg123 \
--network kubenews_net \
rof1966/postgres-alpine-kubenews:v1

### Docker Compose

v1 cli docker-compose --version
v2 cl1 docekr compose version

*** Ferramenta Kompose converte arquivos compose para manifesto Kubernetes ***

docker compose up -d

docker compose down

docker compose stop

docker compose up -d --remove-orphans

docker compose -f compose.yaml up -d

docker compose up -d --build

docker compose push # Sobe a imagem criada no builld

docker compose --env-file hml.env up -d # Se utlizar só o .env não precisar usar --env-file