## Aulas

Orquestrador de containers: 

Arquitetura de Microserviços / Arquitetura Cloud
- Ter ambiente ser escalável de forma horizontal (escalabilidade) e vertical
- Ter contingência e resiliência, recurso de self-reading
- Ponto único de controle e gestão das replicas, fazendo o balanceamento entre as replcias,
 direcionando as requisições (Service Discovery) armazenamento de dados sensíveis de conexão (DB), chaves de criptogtafia

Exemplos de Orquestradores:
- Docker Swarm (Não recomendado para cenários complexos)
- Apache Mesos (Abstrador de recursos para gerenciamento de recursos computacionais como CPU, Memória, Storage)
- Marathon (Trabalaha junto com o Apache Mesos, baixa aderencia no mercado)
- Hashcorp Nomad (Boa plataforma, mas também com baixa adesão do mercado)
- Red Hat Openshift
- Serviços de orquestração nos clouds providers
     Azure App Service
     Azure containers Service
     Azure containers instance
     ARO
     AWS Stalker
     AWS Elastic containers Service
     ROSA
     Google Cloud Run     
- Kubernetes (Criado pelo Google 2015 - SRE - Site Reliability Engineering)

VMs x Cluster Kubernetes

CNCF- Cloud Native Computing Foundation
- Consultar projetos e ferramentas

Certificados pra empresas 
*** Verificar se o Orquestrdor tem certificado  "Certified Kubernetes Software Conformance"

Certificados para profissionais
*** CKAD - Certified Kubernetes Application Developer
*** CKA - Certified Kubernetes Administrator
*** CKS - Certified Kubernetes Security Specialist

Eventos

#KubeCon
#CloudNativeCon

Kubernetes Communit Day - KCD Brasil

Arquitetura Kubernetes
- Cluster Kubernetes 
 - Cada instance pode assumir um dos dois papeis de controle plane, ou worker node
 

 *** O cluster Kubernetes possui vários controladores, estes tem responsabilidades distintas, em áreas e setores específicos,
  gerenciando os diversos elementos e recursos. Exemplo: ReplicaSet definie e controla o número de replcias definidos pela aplicação.
  Node-controller vai gerenciar o número de nós do meu cluster

controle plane
     controller manager = gerenciamento dos controladores do Kubernetes
     api service = faz todas a comunicação entre os elementos do cluster kubernetes (Kubectl)
     scheduler = define onde será execuntado o container (POD)
     etc = banco de dados do tipo chave <> valor (acesso só via api service)

Worker node
     kube-proxy = responsável por toda comunicação de rede dos elementos Kubernetes
     kubelet = responsável por executar o container e se comunicar com o  container runtime, verifica a saúde do container

Elementos que apoiam a Arquitetura Kubebernetes - Interfaces de comunicação entre os elementos:

CRI - Container Runtime Interface = faz processo de excução entre o container runtime e o kubernetes. (ContainerD, CRI-O)
CNI - Container Network Interface = faf a comunicação de redes entre os containers fornecendo ips (WaveNet, Calico, Flannel)
CSI - Container Storage Interface = faz a gestão de softeare de terceiro para armazenamento (AWS, Google, Azure)

Os 3 tipo de cluster Kubernetes
- On-premises
- Cloud providers 
- Local Setup (Minikube, K3D e Kind) Curso (K3D e Kind) KIND mais próximo

### K3D Cluster

k3d cluster create (criando default)

k3d cluster create mycluster --no-lb

k3d cluster create kubedevpro --servers 1 --agents 2

k3d cluster create kubedevpro --servers 1 --agents 2 -p "8080:30000@loadbalancer"

k3d cluster delete kubedevpro

k3d cluster list

k3d cluster delete kubedevpro

###

kubectl cluster-info

kubectl get nodes

kubectl get pods

kubectl get pods -o wide

kubectl get services

kubectl get endpoints

kubectl get endpoints --watch

kubectl get endpoints --watch -o wide

cat ~/.kube/config

kubectl get pods --watch -o wide

kubectl get pods --selector=app=nginx

## Arquivo manifesto usado para criar qualquer objeto no Kubernetes, conhecido como criação declarativa;